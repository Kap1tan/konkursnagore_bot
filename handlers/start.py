# handlers/start.py
import logging
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import bot, router
from config import CHANNEL_ID, ADMIN_IDS
from data import referral_data, users_data
from utils import save_referral_data, save_users_data

async def register_user(user: types.User) -> bool:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Ñ–∞–π–ª–µ.
    –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True,
    –∞ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º.
    """
    user_id = str(user.id)
    if user_id not in users_data:
        users_data[user_id] = {
            "username": user.username or user.full_name,
            "status": "active"
        }
        save_users_data(users_data)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = (
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
            f"<a href='tg://user?id={user.id}'>{user.username or user.full_name}</a>"
        )
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, message_text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        return True
    return False

async def process_subscriber(chat: types.Chat, user: types.User) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: —Å–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –≤—ã–¥–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.
    """
    user_id = user.id
    if str(user_id) in referral_data and referral_data[str(user_id)].get("invite_link"):
        invite_link = referral_data[str(user_id)]["invite_link"]
    else:
        try:
            invite = await bot.create_chat_invite_link(
                chat_id=CHANNEL_ID,
                name=str(user_id),  # –∏–º—è —Å—Å—ã–ª–∫–∏ ‚Äì ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                expire_date=None,   # –±–µ—Å—Å—Ä–æ—á–Ω–æ
                member_limit=0      # –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            )
            invite_link = invite.invite_link
            referral_data[str(user_id)] = {
                "invite_link": invite_link,
                "count": 0,
                "username": user.username or user.full_name
            }
            save_referral_data(referral_data)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await bot.send_message(chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
            return

    await bot.send_message(
        chat.id,
        f"‚úÖ <b>–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n"
        f"<code>{invite_link}</code>\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –∏—Ö –≤ –Ω–∞—à –∫–∞–Ω–∞–ª!"
    )

@router.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    await register_user(message.from_user)
    text = (
        '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ö–æ–Ω–∫—É—Ä—Å –Ω–∞ –ì–æ—Ä–µ"!</b>\n\n'
        "üèÜ <b>–ü—Ä–∏–∑—ã:</b>\n"
        "ü•á 1 –º–µ—Å—Ç–æ: 500 –≥—Ä–∞–º–º –ø—ã–ª—å—Ü—ã –∏ –±–∞–Ω–∫–∞ –º—ë–¥–∞\n"
        "ü•à 2 –º–µ—Å—Ç–æ: 200 –≥—Ä–∞–º–º –ø—ã–ª—å—Ü—ã\n"
        "ü•â 3 –º–µ—Å—Ç–æ: 100 –≥—Ä–∞–º–º –ø—ã–ª—å—Ü—ã\n"
        "üèÖ 4 –º–µ—Å—Ç–æ: –∫—É–ø–æ–Ω –Ω–∞ 15% —Å–∫–∏–¥–∫—É –Ω–∞ –ª—é–±–æ–π –ø—Ä–æ–¥—É–∫—Ç\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã <b>–Ω–∞—á–∞—Ç—å –æ–ø—ã–ª–µ–Ω–∏–µ</b> –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."
    )
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üêù –Ω–∞—á–∞—Ç—å –æ–ø—ã–ª–µ–Ω–∏–µ üêù", callback_data="start_pollination")]
    ])
    await message.answer(text, reply_markup=inline_kb)

@router.message(Command("link"))
async def cmd_link(message: types.Message) -> None:
    await process_subscriber(message.chat, message.from_user)

@router.callback_query(F.data == "start_pollination")
async def callback_start_pollination(callback: types.CallbackQuery) -> None:
    try:
        await callback.message.delete()
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    await process_subscriber(callback.message.chat, callback.from_user)
