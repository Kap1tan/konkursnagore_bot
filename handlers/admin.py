# handlers/admin.py
import os
import tempfile
import asyncio
import logging
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from bot import bot, router
from config import ADMIN_IDS
from data import referral_data, users_data
from utils import get_invite_word, save_referral_data

@router.message(Command("referrals"))
async def cmd_referrals(message: types.Message) -> None:
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    sorted_refs = sorted(referral_data.items(), key=lambda item: item[1].get("count", 0), reverse=True)
    top4 = sorted_refs[:4]
    if not top4:
        text = "–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    else:
        text = "üèÜ <b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>:\n\n"
        rank = 1
        for user_id, info in top4:
            username = info.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            count = info.get("count", 0)
            text += f"{rank}. <a href='tg://user?id={user_id}'>{username}</a> ‚Äî {count} {get_invite_word(count)}\n"
            rank += 1
    await message.answer(text)

@router.message(Command("admin"))
async def cmd_admin(message: types.Message) -> None:
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    total_users = len(users_data)
    active_users = sum(1 for u in users_data.values() if u.get("status") == "active")
    removed_users = sum(1 for u in users_data.values() if u.get("status") == "removed")
    admin_text = (
        "üìä <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>:\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{active_users}</b>\n"
        f"–£–¥–∞–ª–∏–ª–∏ –±–æ—Ç–∞: <b>{removed_users}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="download_referrals")],
        [InlineKeyboardButton(text="üìã –°–∫–∞—á–∞—Ç—å –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤", callback_data="download_users")],
        [InlineKeyboardButton(text="üí¨ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_broadcast")]
    ])
    await message.answer(admin_text, reply_markup=inline_kb)

@router.callback_query(F.data == "download_referrals")
async def callback_download_referrals(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    lines = []
    for user_id, info in referral_data.items():
        username = info.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        count = info.get("count", 0)
        invite_link = info.get("invite_link", "")
        line = f"–ò–º—è: {username}, ID: {user_id}, –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count} {get_invite_word(count)}, –°—Å—ã–ª–∫–∞: {invite_link}"
        lines.append(line)
    text_content = "\n".join(lines) if lines else "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞."
    with tempfile.NamedTemporaryFile(mode="w+", suffix=".txt", delete=False, encoding="utf-8") as tmp:
        tmp.write(text_content)
        tmp_path = tmp.name
    document = FSInputFile(tmp_path)
    await bot.send_document(
        chat_id=callback.from_user.id,
        document=document,
        caption="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º"
    )
    os.remove(tmp_path)
    await callback.answer()

@router.callback_query(F.data == "download_users")
async def callback_download_users(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    lines = []
    for user_id, info in users_data.items():
        username = info.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        user_link = f"tg://user?id={user_id}"
        line = f"–ò–º—è: {username}, –°—Å—ã–ª–∫–∞: {user_link}"
        lines.append(line)
    text_content = "\n".join(lines) if lines else "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
    with tempfile.NamedTemporaryFile(mode="w+", suffix=".txt", delete=False, encoding="utf-8") as tmp:
        tmp.write(text_content)
        tmp_path = tmp.name
    document = FSInputFile(tmp_path)
    await bot.send_document(
        chat_id=callback.from_user.id,
        document=document,
        caption="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    os.remove(tmp_path)
    await callback.answer()

broadcast_mode = False

@router.callback_query(F.data == "create_broadcast")
async def callback_create_broadcast(callback: types.CallbackQuery) -> None:
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    global broadcast_mode
    broadcast_mode = True
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:</b> \n"
        "- <b>–¢–µ–∫—Å—Ç</b> (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–§–æ—Ç–æ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º,–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–í–∏–¥–µ–æ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º,–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–î–æ–∫—É–º–µ–Ω—Ç</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º,–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–ê—É–¥–∏–æ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º,–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º,–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ</b>"
    )
    await callback.answer()

@router.message()
async def handle_broadcast(message: types.Message) -> None:
    global broadcast_mode
    if message.from_user.id not in ADMIN_IDS or not broadcast_mode:
        return
    count = 0
    for user_id, info in users_data.items():
        if info.get("status") == "active":
            try:
                if message.photo:
                    photo_id = message.photo[-1].file_id
                    await bot.send_photo(chat_id=int(user_id), photo=photo_id, caption=message.caption or "")
                elif message.video:
                    await bot.send_video(chat_id=int(user_id), video=message.video.file_id,
                                         caption=message.caption or "")
                elif message.document:
                    await bot.send_document(chat_id=int(user_id), document=message.document.file_id,
                                            caption=message.caption or "")
                elif message.audio:
                    await bot.send_audio(chat_id=int(user_id), audio=message.audio.file_id,
                                         caption=message.caption or "")
                elif message.voice:
                    await bot.send_voice(chat_id=int(user_id), voice=message.voice.file_id,
                                         caption=message.caption or "")
                elif message.video_note:
                    await bot.send_video_note(chat_id=int(user_id), video_note=message.video_note.file_id)
                else:
                    await bot.send_message(chat_id=int(user_id), text=message.text)
                count += 1
                await asyncio.sleep(0.05)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    broadcast_mode = False
